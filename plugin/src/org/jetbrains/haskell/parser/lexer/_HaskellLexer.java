/* The following code was generated by JFlex 1.5.1 */

package org.jetbrains.haskell.parser.lexer;

import java.util.*;
import com.intellij.lexer.*;
import com.intellij.psi.*;
import org.jetbrains.haskell.parser.token.*;
import com.intellij.psi.tree.IElementType;
import org.jetbrains.haskell.parser.cpp.CPPTokens;
import org.jetbrains.grammar.HaskellLexerTokens;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.1
 * from the specification file <tt>C:/Users/lkhatbul/IdeaProjects/haskell-idea-plugin/plugin/src/org/jetbrains/haskell/parser/lexer/Haskell.flex</tt>
 */
class _HaskellLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int BLOCK_COMMENT = 2;
  public static final int TEX = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\3\0\1\5\1\0\1\1\3\0\1\1\1\3\1\12\1\11\1\11"+
    "\22\0\1\2\1\122\1\10\1\111\1\7\1\7\1\13\1\34\1\106"+
    "\1\107\1\7\1\7\1\114\1\77\1\113\1\7\1\132\1\71\1\71"+
    "\1\71\1\71\3\31\2\4\1\30\1\112\1\116\1\115\1\117\1\7"+
    "\1\41\1\61\1\64\1\62\1\33\1\57\1\65\1\74\1\54\1\70"+
    "\1\26\1\63\1\51\1\73\1\47\1\53\1\75\1\60\1\67\1\52"+
    "\1\55\1\50\1\66\1\131\1\56\1\72\1\26\1\105\1\37\1\40"+
    "\1\42\1\27\1\6\1\46\1\17\1\32\1\36\1\100\1\44\1\101"+
    "\1\125\1\35\2\24\1\21\1\16\1\102\1\20\1\126\1\130\1\45"+
    "\1\14\1\123\1\124\1\43\1\127\1\76\1\15\1\24\1\103\1\110"+
    "\1\104\1\121\6\0\1\12\33\0\11\7\1\24\2\7\1\0\4\7"+
    "\2\0\1\7\1\24\3\7\1\0\1\24\1\7\3\0\1\7\27\22"+
    "\1\7\7\22\30\24\1\7\10\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\2\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\2\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\2\22\1\24\1\22\1\24\1\22\3\24\2\22"+
    "\1\24\1\22\1\24\2\22\1\24\3\22\2\24\4\22\1\24\2\22"+
    "\1\24\3\22\3\24\2\22\1\24\2\22\1\24\1\22\1\24\1\22"+
    "\1\24\2\22\1\24\1\22\2\24\1\22\1\24\2\22\1\24\3\22"+
    "\1\24\1\22\1\24\2\22\2\24\1\0\1\22\3\24\4\0\1\22"+
    "\1\0\1\24\1\22\1\0\1\24\1\22\1\0\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\2\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\2\24\1\22\1\0\1\24\1\22\1\24\3\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\7\24\2\22\1\24\2\22"+
    "\2\24\1\22\1\24\4\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\105\24\1\0\44\24\7\0\2\24\4\7\14\0\16\7"+
    "\5\24\7\7\1\0\1\7\1\0\21\7\105\0\1\24\52\0\1\22"+
    "\1\24\1\22\1\24\1\0\1\7\1\22\1\24\2\0\4\24\1\7"+
    "\5\0\2\7\1\22\1\7\3\22\1\0\1\22\1\0\2\22\1\24"+
    "\21\22\1\0\11\22\43\24\1\22\2\24\3\22\3\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\5\24\1\22\1\24\1\7\1\22\1\24\2\22\2\24\63\22"+
    "\60\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\7\7\0\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\2\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\2\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\11\0\46\22\3\0\6\7\1\0\47\24\1\0"+
    "\2\7\4\0\1\7\56\0\1\7\1\0\1\7\2\0\1\7\2\0"+
    "\1\7\54\0\2\7\21\0\12\7\13\0\1\7\2\0\2\7\112\0"+
    "\4\7\146\0\1\7\11\0\1\7\12\0\1\7\23\0\2\7\1\0"+
    "\16\7\350\0\4\7\66\0\17\7\37\0\1\7\u0105\0\2\7\12\0"+
    "\1\7\201\0\2\7\6\0\2\7\364\0\2\7\176\0\1\7\202\0"+
    "\10\7\204\0\1\7\371\0\1\7\172\0\1\7\112\0\1\7\17\0"+
    "\1\7\12\0\2\7\245\0\27\7\2\0\6\7\24\0\1\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\107\0\1\7\70\0\10\7\1\0"+
    "\6\7\1\0\15\7\157\0\6\7\116\0\2\7\46\22\1\0\1\22"+
    "\5\0\1\22\55\0\1\7\u0264\0\11\7\47\0\12\7\146\0\1\7"+
    "\u026c\0\2\7\54\0\2\7\116\0\3\7\107\0\2\7\235\0\3\7"+
    "\1\0\4\7\44\0\13\7\u0135\0\1\7\3\0\2\7\230\0\42\7"+
    "\36\0\2\7\200\0\7\7\1\0\6\7\254\0\21\7\11\0\11\7"+
    "\177\0\4\7\73\0\5\7\76\0\2\7\100\0\10\7\13\0\1\7"+
    "\54\0\300\24\100\0\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\11\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\11\24\10\22\6\24\2\0\6\22\2\0\10\24\10\22\10\24\10\22"+
    "\6\24\2\0\6\22\2\0\10\24\1\0\1\22\1\0\1\22\1\0"+
    "\1\22\1\0\1\22\10\24\10\22\16\24\2\0\10\24\10\0\10\24"+
    "\10\0\10\24\10\0\5\24\1\0\2\24\4\22\1\0\1\7\1\24"+
    "\3\7\3\24\1\0\2\24\4\22\1\0\3\7\4\24\2\0\2\24"+
    "\4\22\1\0\3\7\10\24\5\22\3\7\2\0\3\24\1\0\2\24"+
    "\4\22\1\0\2\7\21\0\30\7\1\12\1\12\6\0\57\7\22\0"+
    "\1\24\10\0\5\7\1\24\12\0\5\7\1\0\15\24\3\0\33\7"+
    "\105\0\2\7\1\22\4\7\1\22\2\7\1\24\3\22\2\24\3\22"+
    "\1\24\1\7\1\22\3\7\5\22\6\7\1\22\1\7\1\22\1\7"+
    "\1\22\1\7\4\22\1\7\1\24\4\22\1\24\4\0\1\24\2\7"+
    "\2\24\2\22\5\7\1\22\4\24\4\7\1\24\1\7\20\0\20\22"+
    "\20\24\3\0\1\22\1\24\13\0\2\7\1\120\155\7\1\7\u01f3\7"+
    "\14\0\47\7\31\0\13\7\121\0\32\7\32\23\32\25\26\0\u0200\7"+
    "\1\0\165\7\36\0\u03b9\7\3\0\12\7\246\0\57\22\1\0\57\24"+
    "\1\0\1\22\1\24\3\22\2\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\4\22\1\24\1\22\2\24\1\22\10\24\3\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\2\24\6\7\1\22\1\24"+
    "\1\22\1\24\3\0\1\22\1\24\5\0\4\7\1\0\2\7\46\24"+
    "\1\0\1\24\5\0\1\24\102\0\1\7\217\0\57\7\1\0\14\7"+
    "\104\0\32\7\1\0\131\7\14\0\326\7\32\0\14\7\5\0\4\7"+
    "\3\0\31\7\17\0\1\7\5\0\2\7\5\0\3\7\133\0\2\7"+
    "\3\0\1\7\132\0\1\7\224\0\2\7\4\0\12\7\40\0\44\7"+
    "\34\0\37\7\13\0\36\7\10\0\1\7\17\0\40\7\12\0\47\7"+
    "\17\0\77\7\1\0\u0100\7\u19c0\0\100\7\u5690\0\67\7\67\0\2\7"+
    "\u010d\0\3\7\60\0\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22"+
    "\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\5\0"+
    "\1\7\12\0\1\7\1\0\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\132\0\6\7"+
    "\10\0\27\7\11\0\2\7\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\3\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\1\24\1\22\12\24"+
    "\1\22\1\24\1\22\1\24\2\22\1\24\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\0\2\7\1\22\1\24\1\22\1\24"+
    "\1\0\1\22\1\24\1\22\1\24\14\0\1\22\1\24\1\22\1\24"+
    "\1\22\1\24\1\22\1\24\1\22\1\24\1\22\115\0\3\24\55\0"+
    "\4\7\12\0\4\7\72\0\4\7\126\0\2\7\50\0\3\7\63\0"+
    "\2\7\57\0\1\7\141\0\15\7\20\0\2\7\174\0\4\7\27\0"+
    "\3\7\144\0\2\7\20\0\2\7\371\0\1\7\u4f14\0\7\24\14\0"+
    "\5\24\21\0\1\7\210\0\20\7\u017c\0\2\7\274\0\2\7\22\0"+
    "\12\7\26\0\43\7\1\0\23\7\1\0\4\7\225\0\17\7\12\0"+
    "\7\7\32\22\6\7\32\24\13\7\172\0\7\7\1\0\7\7\15\0"+
    "\2\7\2\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\2\4\10\1\11\2\7\1\12\1\13\1\10\1\14"+
    "\2\10\1\15\1\16\1\17\3\10\1\20\2\10\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\7\1\27\1\30"+
    "\1\31\1\32\1\7\1\33\1\34\1\35\4\10\1\5"+
    "\3\36\2\1\1\0\1\37\1\0\1\10\1\40\1\10"+
    "\1\0\1\7\1\41\1\42\2\10\1\0\1\43\1\0"+
    "\1\10\1\44\1\45\1\46\2\10\1\0\3\10\1\47"+
    "\1\50\2\10\1\51\1\52\1\0\1\53\1\54\1\0"+
    "\1\7\1\0\1\55\1\56\1\57\1\60\5\10\2\5"+
    "\1\61\1\62\1\0\1\1\17\0\1\10\1\63\1\64"+
    "\1\65\2\7\2\10\1\66\17\0\6\10\1\0\5\10"+
    "\2\0\1\67\1\70\2\0\5\10\13\0\2\10\1\71"+
    "\15\0\3\10\1\72\2\10\1\0\2\10\1\73\1\74"+
    "\1\10\6\0\1\75\1\76\3\10\1\0\1\10\1\77"+
    "\2\10\1\100\2\10\1\0\3\10\17\0\1\101\1\0"+
    "\1\10\1\102\1\10\1\0\1\103\1\104\1\10\1\105"+
    "\1\106\2\10\1\0\1\107\1\110\1\10\20\0\1\111"+
    "\3\0\1\112\1\113\1\10\1\0\1\10\1\114\1\10"+
    "\1\0\1\115\5\0\1\116\2\0\1\117\12\0\1\10"+
    "\1\0\1\120\1\121\10\0\1\122\11\0\1\10\11\0"+
    "\1\123\1\0\1\124\6\0\1\125\1\0\1\126\3\0"+
    "\1\127\1\130\3\0\1\131\4\0\1\132\10\0\1\133"+
    "\1\0\1\134\2\0\1\135\2\0\1\136\4\0\1\137"+
    "\5\0\1\140\1\0\1\141\1\142\1\0\1\143\3\0"+
    "\1\144\1\145\2\0\1\146\2\0\1\147\10\0\1\150"+
    "\1\151";

  private static int [] zzUnpackAction() {
    int [] result = new int[425];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\133\0\266\0\u0111\0\u016c\0\u0111\0\u01c7\0\u0111"+
    "\0\u0222\0\u027d\0\u02d8\0\u0333\0\u038e\0\u03e9\0\u0444\0\u049f"+
    "\0\u04fa\0\u02d8\0\u0555\0\u05b0\0\u060b\0\u0666\0\u06c1\0\u071c"+
    "\0\u0111\0\u0222\0\u0777\0\u07d2\0\u082d\0\u0888\0\u08e3\0\u093e"+
    "\0\u0999\0\u0111\0\u09f4\0\u0a4f\0\u0111\0\u0aaa\0\u0b05\0\u0111"+
    "\0\u0b60\0\u0111\0\u0bbb\0\u0c16\0\u0222\0\u0222\0\u0222\0\u0c71"+
    "\0\u0ccc\0\u0d27\0\u0d82\0\u0ddd\0\u0111\0\u0e38\0\u0e93\0\u0eee"+
    "\0\u0f49\0\u027d\0\u0111\0\u0fa4\0\u0fff\0\u02d8\0\u105a\0\u10b5"+
    "\0\u1110\0\u0222\0\u0111\0\u116b\0\u11c6\0\u1221\0\u0111\0\u127c"+
    "\0\u12d7\0\u02d8\0\u1332\0\u02d8\0\u138d\0\u13e8\0\u1443\0\u149e"+
    "\0\u14f9\0\u1554\0\u02d8\0\u15af\0\u160a\0\u1665\0\u16c0\0\u0111"+
    "\0\u171b\0\u0111\0\u0111\0\u1776\0\u17d1\0\u182c\0\u0111\0\u0222"+
    "\0\u0222\0\u0222\0\u1887\0\u18e2\0\u193d\0\u1998\0\u19f3\0\u1a4e"+
    "\0\u1aa9\0\u0111\0\u0111\0\u1b04\0\u1b5f\0\u1bba\0\u1c15\0\u1c70"+
    "\0\u1ccb\0\u1d26\0\u1d81\0\u1ddc\0\u1e37\0\u1e92\0\u1eed\0\u1f48"+
    "\0\u1fa3\0\u1ffe\0\u2059\0\u20b4\0\u210f\0\u02d8\0\u216a\0\u21c5"+
    "\0\u2220\0\u227b\0\u22d6\0\u2331\0\u0111\0\u238c\0\u23e7\0\u2442"+
    "\0\u249d\0\u24f8\0\u2553\0\u25ae\0\u2609\0\u2664\0\u26bf\0\u271a"+
    "\0\u2775\0\u27d0\0\u282b\0\u2886\0\u28e1\0\u293c\0\u2997\0\u29f2"+
    "\0\u2a4d\0\u2aa8\0\u2b03\0\u2b5e\0\u2bb9\0\u2c14\0\u2c6f\0\u2cca"+
    "\0\u2d25\0\u2d80\0\u2ddb\0\u0111\0\u2e36\0\u2e91\0\u2eec\0\u2f47"+
    "\0\u2fa2\0\u2ffd\0\u3058\0\u30b3\0\u310e\0\u3169\0\u31c4\0\u321f"+
    "\0\u327a\0\u32d5\0\u3330\0\u338b\0\u33e6\0\u3441\0\u349c\0\u34f7"+
    "\0\u02d8\0\u3552\0\u35ad\0\u3608\0\u3663\0\u36be\0\u3719\0\u3774"+
    "\0\u37cf\0\u382a\0\u3885\0\u38e0\0\u393b\0\u3996\0\u39f1\0\u3a4c"+
    "\0\u3aa7\0\u02d8\0\u3b02\0\u3b5d\0\u3bb8\0\u3c13\0\u3c6e\0\u02d8"+
    "\0\u02d8\0\u3cc9\0\u3d24\0\u3d7f\0\u3dda\0\u3e35\0\u3e90\0\u3eeb"+
    "\0\u02d8\0\u02d8\0\u3f46\0\u3fa1\0\u3ffc\0\u4057\0\u40b2\0\u02d8"+
    "\0\u410d\0\u4168\0\u41c3\0\u421e\0\u4279\0\u42d4\0\u432f\0\u438a"+
    "\0\u43e5\0\u4440\0\u449b\0\u44f6\0\u4551\0\u45ac\0\u4607\0\u4662"+
    "\0\u46bd\0\u4718\0\u4773\0\u47ce\0\u4829\0\u4884\0\u48df\0\u493a"+
    "\0\u4995\0\u49f0\0\u4a4b\0\u02d8\0\u4aa6\0\u4b01\0\u02d8\0\u02d8"+
    "\0\u4b5c\0\u02d8\0\u02d8\0\u4bb7\0\u4c12\0\u4c6d\0\u02d8\0\u02d8"+
    "\0\u4cc8\0\u4d23\0\u4d7e\0\u4dd9\0\u4e34\0\u4e8f\0\u4eea\0\u4f45"+
    "\0\u4fa0\0\u4ffb\0\u5056\0\u50b1\0\u510c\0\u5167\0\u51c2\0\u521d"+
    "\0\u5278\0\u3d24\0\u52d3\0\u532e\0\u5389\0\u53e4\0\u02d8\0\u543f"+
    "\0\u549a\0\u54f5\0\u02d8\0\u5550\0\u55ab\0\u02d8\0\u5606\0\u5661"+
    "\0\u56bc\0\u5717\0\u5772\0\u3d24\0\u57cd\0\u5828\0\u3d24\0\u5883"+
    "\0\u58de\0\u5939\0\u5994\0\u59ef\0\u5a4a\0\u5aa5\0\u5b00\0\u5b5b"+
    "\0\u5bb6\0\u5c11\0\u5c6c\0\u02d8\0\u02d8\0\u5cc7\0\u5d22\0\u5d7d"+
    "\0\u5dd8\0\u5e33\0\u5e8e\0\u5ee9\0\u5f44\0\u3d24\0\u5f9f\0\u5ffa"+
    "\0\u6055\0\u60b0\0\u610b\0\u6166\0\u61c1\0\u621c\0\u6277\0\u62d2"+
    "\0\u632d\0\u6388\0\u63e3\0\u643e\0\u6499\0\u64f4\0\u654f\0\u65aa"+
    "\0\u6605\0\u3d24\0\u6660\0\u3d24\0\u66bb\0\u6716\0\u6771\0\u67cc"+
    "\0\u6827\0\u6882\0\u02d8\0\u68dd\0\u0111\0\u6938\0\u6993\0\u69ee"+
    "\0\u3d24\0\u3d24\0\u6a49\0\u6aa4\0\u6aff\0\u3d24\0\u6b5a\0\u6bb5"+
    "\0\u6c10\0\u6c6b\0\u52d3\0\u6cc6\0\u6d21\0\u6d7c\0\u6dd7\0\u6e32"+
    "\0\u6e8d\0\u6ee8\0\u6f43\0\u3d24\0\u6f9e\0\u3d24\0\u6ff9\0\u7054"+
    "\0\u3d24\0\u70af\0\u710a\0\u3d24\0\u7165\0\u71c0\0\u721b\0\u7276"+
    "\0\u0111\0\u72d1\0\u732c\0\u7387\0\u73e2\0\u743d\0\u7498\0\u74f3"+
    "\0\u3d24\0\u3d24\0\u754e\0\u75a9\0\u7604\0\u765f\0\u76ba\0\u3d24"+
    "\0\u3d24\0\u7715\0\u7770\0\u3d24\0\u77cb\0\u7826\0\u3d24\0\u7881"+
    "\0\u78dc\0\u7937\0\u7992\0\u79ed\0\u7a48\0\u7aa3\0\u7afe\0\u3d24"+
    "\0\u3d24";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[425];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\6\2\7\1\10\1\11\1\12\1\5"+
    "\1\0\1\11\2\13\1\14\1\13\1\15\1\16\1\17"+
    "\1\20\1\13\1\21\1\17\1\22\1\23\1\7\1\24"+
    "\1\17\1\25\1\26\1\27\1\30\1\31\1\32\1\11"+
    "\1\13\1\33\1\34\1\35\22\17\1\7\4\17\1\13"+
    "\1\36\1\37\1\13\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\11\1\55\1\56\1\57\1\60\1\13\1\61\1\13"+
    "\1\62\1\63\1\17\1\64\12\65\1\0\64\65\1\66"+
    "\3\65\1\67\27\65\37\70\1\71\73\70\134\0\2\5"+
    "\6\0\1\5\125\0\2\7\23\0\1\7\37\0\1\7"+
    "\40\0\1\7\7\0\1\11\3\0\1\11\7\0\1\11"+
    "\1\0\1\11\2\0\1\11\6\0\1\11\1\0\2\11"+
    "\34\0\1\11\10\0\2\11\1\0\1\11\1\0\6\11"+
    "\10\0\3\72\1\73\4\72\1\73\26\72\1\74\73\72"+
    "\4\0\2\13\6\0\14\13\1\0\6\13\4\0\34\13"+
    "\1\0\3\13\20\0\10\13\4\0\2\13\6\0\4\13"+
    "\1\75\7\13\1\0\6\13\4\0\34\13\1\0\3\13"+
    "\20\0\10\13\4\0\2\13\6\0\14\13\1\0\6\13"+
    "\4\0\1\13\1\76\32\13\1\0\3\13\20\0\10\13"+
    "\4\0\2\13\6\0\14\13\1\0\6\13\4\0\34\13"+
    "\1\0\1\77\2\13\20\0\10\13\4\0\2\17\6\0"+
    "\14\17\1\0\6\17\4\0\34\17\1\0\3\17\10\0"+
    "\1\100\7\0\10\17\4\0\2\17\1\0\1\11\3\0"+
    "\1\11\7\17\1\20\1\17\1\20\2\17\1\11\6\17"+
    "\1\11\1\0\2\11\34\17\1\11\3\17\5\0\2\11"+
    "\1\0\1\101\1\0\6\11\10\17\4\0\2\13\1\0"+
    "\1\11\3\0\1\11\7\13\1\21\1\13\1\21\2\13"+
    "\1\11\6\13\1\11\1\0\2\11\34\13\1\11\3\13"+
    "\5\0\2\11\1\0\1\11\1\0\6\11\10\13\7\0"+
    "\1\11\3\0\1\11\7\0\1\11\1\0\1\11\2\0"+
    "\1\102\6\0\1\11\1\103\2\11\34\0\1\11\10\0"+
    "\2\11\1\0\1\11\1\0\6\11\14\0\2\13\6\0"+
    "\5\13\1\104\6\13\1\0\6\13\4\0\3\13\1\105"+
    "\30\13\1\0\3\13\20\0\10\13\3\106\1\0\30\106"+
    "\1\107\2\106\1\110\73\106\4\0\2\13\6\0\2\13"+
    "\1\111\11\13\1\0\6\13\4\0\1\13\1\112\32\13"+
    "\1\0\2\13\1\113\20\0\10\13\4\0\2\13\6\0"+
    "\4\13\1\114\7\13\1\0\6\13\4\0\3\13\1\115"+
    "\30\13\1\0\1\116\2\13\20\0\10\13\7\0\1\11"+
    "\3\0\1\11\7\0\1\11\1\0\1\11\2\0\1\11"+
    "\6\0\1\11\1\0\2\11\34\0\1\11\1\117\7\0"+
    "\2\11\1\0\1\11\1\0\6\11\14\0\2\13\6\0"+
    "\4\13\1\120\7\13\1\0\6\13\4\0\3\13\1\121"+
    "\30\13\1\0\3\13\20\0\10\13\4\0\2\13\6\0"+
    "\4\13\1\122\7\13\1\0\6\13\4\0\34\13\1\0"+
    "\3\13\20\0\10\13\4\0\2\13\6\0\1\123\13\13"+
    "\1\0\6\13\4\0\34\13\1\0\3\13\20\0\10\13"+
    "\7\0\1\11\3\0\1\11\7\0\1\11\1\0\1\11"+
    "\2\0\1\11\6\0\1\11\1\0\2\11\34\0\1\124"+
    "\10\0\2\11\1\0\1\11\1\0\2\11\1\55\3\11"+
    "\14\0\2\13\6\0\5\13\1\125\6\13\1\0\6\13"+
    "\4\0\34\13\1\0\3\13\20\0\10\13\4\0\2\13"+
    "\6\0\14\13\1\0\6\13\4\0\34\13\1\0\1\126"+
    "\2\13\20\0\10\13\77\0\1\127\63\0\1\130\212\0"+
    "\1\131\1\132\30\0\1\11\3\0\1\11\7\0\1\11"+
    "\1\0\1\11\2\0\1\11\6\0\1\11\1\0\2\11"+
    "\34\0\1\11\7\0\1\133\2\11\1\0\1\11\1\0"+
    "\6\11\17\0\1\11\3\0\1\11\7\0\1\11\1\0"+
    "\1\11\2\0\1\11\4\0\1\134\1\0\1\11\1\0"+
    "\2\11\34\0\1\135\1\136\6\0\1\137\2\11\1\0"+
    "\1\11\1\0\6\11\17\0\1\11\3\0\1\11\7\0"+
    "\1\11\1\0\1\11\2\0\1\11\6\0\1\11\1\0"+
    "\2\11\34\0\1\11\10\0\2\11\1\0\1\140\1\0"+
    "\6\11\17\0\1\11\3\0\1\11\7\0\1\11\1\0"+
    "\1\11\2\0\1\11\6\0\1\11\1\0\2\11\34\0"+
    "\1\11\10\0\2\11\1\0\1\11\1\0\2\11\1\141"+
    "\3\11\17\0\1\11\3\0\1\11\7\0\1\11\1\0"+
    "\1\11\2\0\1\11\6\0\1\11\1\0\2\11\34\0"+
    "\1\142\10\0\2\11\1\0\1\11\1\0\6\11\14\0"+
    "\2\13\6\0\1\13\1\143\12\13\1\0\6\13\4\0"+
    "\34\13\1\0\3\13\20\0\2\13\1\144\5\13\4\0"+
    "\2\13\6\0\14\13\1\0\4\13\1\145\1\13\4\0"+
    "\34\13\1\0\3\13\20\0\10\13\4\0\2\13\6\0"+
    "\14\13\1\0\6\13\4\0\34\13\1\0\3\13\20\0"+
    "\2\13\1\146\5\13\4\0\2\13\6\0\14\13\1\0"+
    "\6\13\4\0\34\13\1\0\3\13\20\0\1\13\1\147"+
    "\6\13\4\0\2\7\12\0\1\150\10\0\1\7\21\0"+
    "\1\150\2\0\1\151\12\0\1\7\4\0\1\151\33\0"+
    "\1\7\104\0\1\152\125\0\1\153\33\0\37\70\1\0"+
    "\73\70\17\0\1\154\17\0\1\155\74\0\3\156\1\72"+
    "\3\0\1\72\1\156\1\0\1\72\3\0\1\72\1\157"+
    "\10\0\1\72\1\0\1\160\1\72\2\0\1\72\2\0"+
    "\1\161\4\72\1\162\1\163\1\164\1\165\1\0\1\166"+
    "\2\0\1\167\1\0\1\170\1\171\1\0\1\172\1\173"+
    "\1\166\1\163\1\0\1\72\2\0\1\163\1\0\1\174"+
    "\3\0\1\72\20\0\1\72\6\0\1\72\4\0\2\13"+
    "\6\0\14\13\1\0\5\13\1\175\4\0\34\13\1\0"+
    "\3\13\20\0\10\13\4\0\2\13\6\0\14\13\1\0"+
    "\6\13\4\0\34\13\1\0\3\13\20\0\1\176\7\13"+
    "\14\0\6\177\2\200\2\177\1\200\1\177\2\0\1\177"+
    "\1\200\1\0\2\177\4\0\4\177\22\200\1\0\4\200"+
    "\1\177\1\0\3\177\20\0\6\177\1\200\10\0\1\11"+
    "\3\0\1\11\6\177\1\200\1\201\1\177\1\202\1\200"+
    "\1\177\1\11\1\0\1\177\1\200\1\0\2\177\1\11"+
    "\1\0\2\11\4\177\22\200\1\0\4\200\1\177\1\11"+
    "\3\177\5\0\2\11\1\0\1\11\1\0\6\11\6\177"+
    "\1\200\5\0\2\13\6\0\14\13\1\0\6\13\4\0"+
    "\3\13\1\203\30\13\1\0\3\13\20\0\10\13\4\0"+
    "\2\13\6\0\1\204\13\13\1\0\6\13\4\0\34\13"+
    "\1\0\3\13\20\0\10\13\34\0\1\205\102\0\1\206"+
    "\3\0\1\106\2\0\1\106\3\0\1\106\1\207\10\0"+
    "\1\206\1\0\1\210\1\106\2\0\1\106\2\0\1\211"+
    "\4\106\1\212\1\213\1\214\1\215\1\0\1\216\2\0"+
    "\1\217\1\0\1\220\1\221\1\0\1\222\1\223\1\216"+
    "\1\213\1\0\1\206\2\0\1\213\1\0\1\224\3\0"+
    "\1\106\20\0\1\106\6\0\1\206\4\0\2\13\6\0"+
    "\14\13\1\0\6\13\4\0\34\13\1\0\3\13\20\0"+
    "\3\13\1\225\4\13\4\0\2\13\6\0\1\226\13\13"+
    "\1\0\6\13\4\0\1\13\1\227\32\13\1\0\3\13"+
    "\20\0\10\13\4\0\2\13\6\0\14\13\1\0\6\13"+
    "\4\0\34\13\1\0\3\13\20\0\1\230\7\13\4\0"+
    "\2\13\6\0\14\13\1\0\6\13\4\0\1\13\1\231"+
    "\1\232\31\13\1\0\3\13\20\0\10\13\102\0\1\233"+
    "\34\0\2\13\6\0\14\13\1\0\6\13\4\0\2\13"+
    "\1\234\31\13\1\0\3\13\20\0\10\13\4\0\2\13"+
    "\6\0\2\13\1\235\11\13\1\0\6\13\4\0\34\13"+
    "\1\0\3\13\20\0\10\13\4\0\2\13\6\0\5\13"+
    "\1\236\6\13\1\0\6\13\4\0\34\13\1\0\3\13"+
    "\20\0\10\13\3\124\1\0\127\124\4\0\2\13\6\0"+
    "\1\237\13\13\1\0\6\13\4\0\34\13\1\0\3\13"+
    "\20\0\10\13\4\0\2\13\6\0\14\13\1\0\6\13"+
    "\4\0\34\13\1\0\3\13\20\0\4\13\1\240\3\13"+
    "\111\0\1\241\21\0\3\242\1\0\5\242\2\0\120\242"+
    "\44\0\1\243\75\0\1\11\3\0\1\11\7\0\1\11"+
    "\1\0\1\11\2\0\1\11\6\0\1\11\1\0\2\11"+
    "\34\0\1\11\4\0\1\244\3\0\2\11\1\0\1\11"+
    "\1\0\6\11\31\0\1\245\60\0\1\246\34\0\2\13"+
    "\6\0\14\13\1\0\6\13\4\0\34\13\1\0\3\13"+
    "\20\0\3\13\1\247\4\13\4\0\2\13\6\0\14\13"+
    "\1\0\6\13\4\0\34\13\1\0\1\250\2\13\20\0"+
    "\10\13\4\0\2\13\6\0\14\13\1\0\5\13\1\251"+
    "\4\0\34\13\1\0\3\13\20\0\10\13\4\0\2\13"+
    "\6\0\14\13\1\0\6\13\4\0\34\13\1\0\1\252"+
    "\2\13\20\0\10\13\4\0\2\13\6\0\14\13\1\0"+
    "\6\13\4\0\3\13\1\253\30\13\1\0\3\13\20\0"+
    "\10\13\31\0\1\150\37\0\1\150\40\0\1\150\4\0"+
    "\1\151\12\0\1\151\11\0\3\151\2\0\1\151\5\0"+
    "\1\151\1\0\1\151\10\0\1\151\1\0\2\151\1\0"+
    "\2\151\3\0\1\151\6\0\1\151\31\0\1\151\100\0"+
    "\1\254\71\0\1\155\74\0\3\156\5\0\1\156\25\0"+
    "\1\72\124\0\1\72\37\0\1\72\40\0\1\72\51\0"+
    "\1\255\5\0\1\256\2\0\1\257\76\0\2\72\3\0"+
    "\1\72\3\0\4\72\4\0\22\72\1\0\4\72\7\0"+
    "\1\72\23\0\1\72\51\0\1\256\10\0\1\260\123\0"+
    "\1\72\145\0\1\72\115\0\1\261\2\0\1\72\1\0"+
    "\1\262\12\0\1\72\1\0\1\263\2\0\1\72\112\0"+
    "\1\72\124\0\1\264\2\0\1\265\1\166\1\0\1\266"+
    "\15\0\1\72\121\0\1\260\131\0\1\263\5\0\1\72"+
    "\115\0\1\72\4\0\1\256\125\0\1\72\12\0\1\72"+
    "\51\0\1\72\12\0\1\72\11\0\3\72\2\0\1\72"+
    "\5\0\1\72\1\0\1\72\10\0\1\72\1\0\2\72"+
    "\1\0\2\72\3\0\1\72\6\0\1\72\31\0\1\72"+
    "\4\0\2\13\6\0\14\13\1\0\6\13\4\0\34\13"+
    "\1\0\3\13\20\0\1\13\1\267\6\13\4\0\2\177"+
    "\6\0\14\177\1\0\6\177\4\0\34\177\1\0\3\177"+
    "\20\0\10\177\4\0\2\200\6\0\14\200\1\0\6\200"+
    "\4\0\34\200\1\0\3\200\10\0\1\100\7\0\10\200"+
    "\4\0\2\200\1\0\1\11\3\0\1\11\7\200\1\201"+
    "\1\200\1\201\2\200\1\11\6\200\1\11\1\0\2\11"+
    "\34\200\1\11\3\200\5\0\2\11\1\0\1\101\1\0"+
    "\6\11\10\200\4\0\2\177\1\0\1\11\3\0\1\11"+
    "\7\177\1\202\1\177\1\202\2\177\1\11\6\177\1\11"+
    "\1\0\2\11\34\177\1\11\3\177\5\0\2\11\1\0"+
    "\1\11\1\0\6\11\10\177\4\0\2\13\6\0\1\270"+
    "\13\13\1\0\6\13\4\0\34\13\1\0\3\13\20\0"+
    "\10\13\4\0\2\13\6\0\14\13\1\0\6\13\4\0"+
    "\34\13\1\0\1\271\2\13\20\0\10\13\4\0\1\206"+
    "\24\0\1\206\2\0\1\205\34\0\1\206\40\0\1\206"+
    "\31\0\1\272\37\0\1\272\40\0\1\272\51\0\1\273"+
    "\5\0\1\274\2\0\1\275\76\0\2\106\3\0\1\106"+
    "\3\0\4\106\4\0\22\106\1\0\4\106\7\0\1\106"+
    "\23\0\1\106\51\0\1\274\10\0\1\276\123\0\1\106"+
    "\145\0\1\106\115\0\1\277\2\0\1\300\1\0\1\301"+
    "\12\0\1\106\1\0\1\302\2\0\1\106\112\0\1\106"+
    "\124\0\1\303\2\0\1\304\1\216\1\0\1\305\15\0"+
    "\1\106\121\0\1\276\131\0\1\302\5\0\1\106\115\0"+
    "\1\106\4\0\1\274\125\0\1\106\12\0\1\106\51\0"+
    "\1\306\12\0\1\306\11\0\3\306\2\0\1\306\5\0"+
    "\1\306\1\0\1\306\10\0\1\306\1\0\2\306\1\0"+
    "\2\306\3\0\1\306\6\0\1\306\31\0\1\306\4\0"+
    "\2\13\6\0\4\13\1\307\7\13\1\0\6\13\4\0"+
    "\34\13\1\0\3\13\20\0\10\13\4\0\2\13\6\0"+
    "\14\13\1\0\6\13\4\0\34\13\1\0\3\13\20\0"+
    "\1\310\7\13\4\0\2\13\6\0\14\13\1\0\4\13"+
    "\1\311\1\13\4\0\34\13\1\0\3\13\20\0\10\13"+
    "\4\0\2\13\6\0\14\13\1\0\6\13\4\0\3\13"+
    "\1\312\30\13\1\0\3\13\20\0\10\13\4\0\2\13"+
    "\6\0\14\13\1\0\6\13\4\0\3\13\1\313\30\13"+
    "\1\0\3\13\20\0\10\13\4\0\2\13\6\0\14\13"+
    "\1\0\4\13\1\314\1\13\4\0\34\13\1\0\3\13"+
    "\20\0\10\13\36\0\1\315\100\0\2\13\6\0\14\13"+
    "\1\0\6\13\4\0\3\13\1\316\30\13\1\0\3\13"+
    "\20\0\10\13\4\0\2\13\6\0\14\13\1\0\4\13"+
    "\1\317\1\13\4\0\34\13\1\0\3\13\20\0\10\13"+
    "\4\0\2\13\6\0\14\13\1\0\6\13\4\0\34\13"+
    "\1\0\1\320\2\13\20\0\10\13\4\0\2\13\6\0"+
    "\14\13\1\0\6\13\4\0\34\13\1\0\1\321\2\13"+
    "\20\0\10\13\4\0\2\13\6\0\14\13\1\0\6\13"+
    "\4\0\34\13\1\0\3\13\20\0\1\322\7\13\2\323"+
    "\1\324\1\0\5\323\2\0\76\323\1\325\21\323\13\0"+
    "\1\326\117\0\3\243\1\0\127\243\14\0\1\327\154\0"+
    "\1\330\100\0\2\13\6\0\14\13\1\0\6\13\4\0"+
    "\34\13\1\0\1\331\2\13\20\0\10\13\4\0\2\13"+
    "\6\0\14\13\1\0\6\13\4\0\34\13\1\0\2\13"+
    "\1\332\20\0\10\13\4\0\2\13\6\0\14\13\1\0"+
    "\4\13\1\333\1\13\4\0\34\13\1\0\3\13\20\0"+
    "\10\13\4\0\2\13\6\0\14\13\1\0\6\13\4\0"+
    "\2\13\1\334\31\13\1\0\3\13\20\0\10\13\4\0"+
    "\2\13\6\0\5\13\1\335\6\13\1\0\6\13\4\0"+
    "\34\13\1\0\3\13\20\0\10\13\101\0\1\336\110\0"+
    "\1\72\124\0\1\72\152\0\1\72\124\0\1\72\133\0"+
    "\1\72\124\0\1\72\123\0\1\72\143\0\1\72\134\0"+
    "\1\72\126\0\1\72\5\0\1\72\52\0\2\13\6\0"+
    "\5\13\1\337\6\13\1\0\6\13\4\0\34\13\1\0"+
    "\3\13\20\0\10\13\4\0\2\13\6\0\1\340\13\13"+
    "\1\0\6\13\4\0\34\13\1\0\3\13\20\0\10\13"+
    "\31\0\1\272\2\0\1\205\34\0\1\272\40\0\1\272"+
    "\57\0\1\106\124\0\1\106\152\0\1\106\124\0\1\106"+
    "\133\0\1\106\102\0\1\205\17\0\1\106\134\0\1\106"+
    "\123\0\1\106\143\0\1\106\134\0\1\106\126\0\1\106"+
    "\5\0\1\106\52\0\1\306\12\0\1\306\11\0\3\306"+
    "\1\205\1\0\1\306\5\0\1\306\1\0\1\306\10\0"+
    "\1\306\1\0\2\306\1\0\2\306\3\0\1\306\6\0"+
    "\1\306\31\0\1\306\4\0\2\13\6\0\14\13\1\0"+
    "\6\13\4\0\2\13\1\341\31\13\1\0\3\13\20\0"+
    "\10\13\4\0\2\13\6\0\14\13\1\0\6\13\4\0"+
    "\3\13\1\342\30\13\1\0\3\13\20\0\10\13\4\0"+
    "\2\13\6\0\14\13\1\0\6\13\4\0\33\13\1\343"+
    "\1\0\3\13\20\0\10\13\4\0\2\13\6\0\14\13"+
    "\1\0\6\13\4\0\34\13\1\0\3\13\20\0\1\13"+
    "\1\344\6\13\4\0\2\13\6\0\14\13\1\0\6\13"+
    "\4\0\1\345\33\13\1\0\3\13\20\0\10\13\103\0"+
    "\1\346\33\0\2\13\6\0\5\13\1\347\6\13\1\0"+
    "\6\13\4\0\34\13\1\0\3\13\20\0\10\13\4\0"+
    "\2\13\6\0\5\13\1\350\6\13\1\0\6\13\4\0"+
    "\34\13\1\0\3\13\20\0\10\13\4\0\2\13\6\0"+
    "\1\13\1\351\12\13\1\0\6\13\4\0\34\13\1\0"+
    "\3\13\20\0\10\13\3\323\1\0\5\323\2\0\76\323"+
    "\1\325\24\323\1\0\5\323\2\0\20\323\1\352\13\323"+
    "\1\353\1\354\1\323\1\355\1\356\5\323\1\357\1\360"+
    "\3\323\1\361\1\362\1\363\2\323\1\364\1\365\14\323"+
    "\1\325\17\323\1\366\4\323\1\0\5\323\2\0\64\323"+
    "\1\367\11\323\1\325\21\323\13\0\1\370\217\0\1\371"+
    "\67\0\1\372\101\0\2\13\6\0\14\13\1\0\6\13"+
    "\4\0\34\13\1\0\2\13\1\373\20\0\10\13\4\0"+
    "\2\13\6\0\14\13\1\0\6\13\4\0\34\13\1\0"+
    "\1\374\2\13\20\0\10\13\4\0\2\13\6\0\14\13"+
    "\1\0\4\13\1\375\1\13\4\0\34\13\1\0\3\13"+
    "\20\0\10\13\35\0\1\376\101\0\2\13\6\0\14\13"+
    "\1\0\6\13\4\0\34\13\1\0\1\377\2\13\20\0"+
    "\10\13\4\0\2\13\6\0\14\13\1\0\6\13\4\0"+
    "\34\13\1\0\3\13\20\0\1\u0100\7\13\4\0\2\13"+
    "\6\0\14\13\1\0\6\13\4\0\34\13\1\0\2\13"+
    "\1\u0101\20\0\10\13\4\0\2\13\6\0\5\13\1\u0102"+
    "\6\13\1\0\6\13\4\0\2\13\1\u0103\31\13\1\0"+
    "\3\13\20\0\10\13\4\0\2\13\6\0\5\13\1\u0104"+
    "\6\13\1\0\6\13\4\0\34\13\1\0\3\13\20\0"+
    "\10\13\4\0\2\13\6\0\14\13\1\0\4\13\1\u0105"+
    "\1\13\4\0\34\13\1\0\3\13\20\0\10\13\32\0"+
    "\1\u0106\104\0\2\13\6\0\5\13\1\u0107\6\13\1\0"+
    "\6\13\4\0\34\13\1\0\3\13\20\0\10\13\4\0"+
    "\2\13\6\0\1\13\1\u0108\12\13\1\0\6\13\4\0"+
    "\34\13\1\0\3\13\20\0\10\13\4\0\2\13\6\0"+
    "\14\13\1\0\6\13\4\0\34\13\1\0\3\13\20\0"+
    "\3\13\1\u0109\4\13\3\323\1\0\5\323\2\0\44\323"+
    "\1\u010a\31\323\1\325\24\323\1\0\5\323\2\0\40\323"+
    "\1\u010b\35\323\1\325\24\323\1\0\5\323\2\0\34\323"+
    "\1\u010c\41\323\1\325\24\323\1\0\5\323\2\0\40\323"+
    "\1\u010d\6\323\1\u010e\12\323\1\u010f\13\323\1\325\24\323"+
    "\1\0\5\323\2\0\53\323\1\u0110\22\323\1\325\24\323"+
    "\1\0\5\323\2\0\34\323\1\u0111\41\323\1\325\24\323"+
    "\1\0\5\323\2\0\40\323\1\u0112\1\323\1\u0113\33\323"+
    "\1\325\24\323\1\0\5\323\2\0\44\323\1\u0114\31\323"+
    "\1\325\24\323\1\0\5\323\2\0\35\323\1\u0115\40\323"+
    "\1\325\24\323\1\0\5\323\2\0\34\323\1\u0116\41\323"+
    "\1\325\24\323\1\0\5\323\2\0\55\323\1\u0117\20\323"+
    "\1\325\24\323\1\0\5\323\2\0\44\323\1\u0118\31\323"+
    "\1\325\24\323\1\0\5\323\2\0\46\323\1\u0119\27\323"+
    "\1\325\24\323\1\0\5\323\2\0\71\323\1\u011a\4\323"+
    "\1\325\21\323\14\u011b\1\u011c\1\u011d\115\u011b\3\371\1\0"+
    "\127\371\44\0\1\u011e\72\0\2\13\6\0\14\13\1\0"+
    "\6\13\4\0\34\13\1\0\1\13\1\u011f\1\13\20\0"+
    "\10\13\4\0\2\13\6\0\14\13\1\0\6\13\4\0"+
    "\1\13\1\u0120\32\13\1\0\3\13\20\0\10\13\102\0"+
    "\1\u0121\34\0\2\13\6\0\14\13\1\0\1\13\1\u0122"+
    "\4\13\4\0\34\13\1\0\3\13\20\0\10\13\4\0"+
    "\2\13\6\0\14\13\1\0\6\13\4\0\34\13\1\0"+
    "\3\13\20\0\1\u0123\7\13\4\0\2\13\6\0\14\13"+
    "\1\0\6\13\4\0\34\13\1\0\2\13\1\u0124\20\0"+
    "\10\13\20\0\1\u0125\116\0\2\13\6\0\14\13\1\0"+
    "\6\13\4\0\34\13\1\0\1\u0126\2\13\20\0\10\13"+
    "\3\323\1\0\5\323\2\0\62\323\1\u0127\13\323\1\325"+
    "\24\323\1\0\5\323\2\0\35\323\1\u0128\15\323\1\u0129"+
    "\22\323\1\325\24\323\1\0\5\323\2\0\62\323\1\u012a"+
    "\13\323\1\325\24\323\1\0\5\323\2\0\35\323\1\u012b"+
    "\40\323\1\325\24\323\1\0\5\323\2\0\47\323\1\u012c"+
    "\26\323\1\325\24\323\1\0\5\323\2\0\44\323\1\u012d"+
    "\31\323\1\325\24\323\1\0\5\323\2\0\44\323\1\u012e"+
    "\31\323\1\325\24\323\1\0\5\323\2\0\34\323\1\u012f"+
    "\41\323\1\325\24\323\1\0\5\323\2\0\54\323\1\u0130"+
    "\21\323\1\325\24\323\1\0\5\323\2\0\57\323\1\u0131"+
    "\16\323\1\325\24\323\1\0\5\323\2\0\47\323\1\u0132"+
    "\26\323\1\325\24\323\1\0\5\323\2\0\36\323\1\u0133"+
    "\37\323\1\325\24\323\1\0\5\323\2\0\36\323\1\u0134"+
    "\10\323\1\u0135\26\323\1\325\24\323\1\0\5\323\2\0"+
    "\34\323\1\u0136\41\323\1\325\24\323\1\0\5\323\2\0"+
    "\34\323\1\u0137\41\323\1\325\24\323\1\0\5\323\2\0"+
    "\54\323\1\u0138\21\323\1\325\21\323\15\u011b\1\u011d\265\u011b"+
    "\1\u011d\1\u0139\114\u011b\3\u011e\1\0\127\u011e\4\0\2\13"+
    "\6\0\14\13\1\0\4\13\1\u013a\1\13\4\0\34\13"+
    "\1\0\3\13\20\0\10\13\103\0\1\u013b\33\0\2\13"+
    "\6\0\14\13\1\0\6\13\4\0\34\13\1\0\1\u013c"+
    "\2\13\20\0\10\13\4\0\2\13\6\0\14\13\1\0"+
    "\6\13\4\0\34\13\1\0\1\13\1\u013d\1\13\20\0"+
    "\10\13\36\0\1\u013e\74\0\3\323\1\0\5\323\2\0"+
    "\54\323\1\u013f\21\323\1\325\24\323\1\0\5\323\2\0"+
    "\34\323\1\u0140\41\323\1\325\24\323\1\0\5\323\2\0"+
    "\44\323\1\u0141\31\323\1\325\24\323\1\0\5\323\2\0"+
    "\46\323\1\u0142\27\323\1\325\24\323\1\0\5\323\2\0"+
    "\54\323\1\u0143\21\323\1\325\24\323\1\0\5\323\2\0"+
    "\47\323\1\u0144\26\323\1\325\24\323\1\0\5\323\2\0"+
    "\54\323\1\u0145\21\323\1\325\24\323\1\0\5\323\2\0"+
    "\44\323\1\u0146\31\323\1\325\24\323\1\0\5\323\2\0"+
    "\62\323\1\u0147\13\323\1\325\24\323\1\0\5\323\2\0"+
    "\42\323\1\u0148\33\323\1\325\24\323\1\0\5\323\2\0"+
    "\44\323\1\u0149\31\323\1\325\24\323\1\0\5\323\2\0"+
    "\55\323\1\u014a\20\323\1\325\24\323\1\0\5\323\2\0"+
    "\40\323\1\u014b\35\323\1\325\24\323\1\0\5\323\2\0"+
    "\55\323\1\u014c\20\323\1\325\24\323\1\0\5\323\2\0"+
    "\44\323\1\u014d\31\323\1\325\24\323\1\0\5\323\2\0"+
    "\34\323\1\u014e\41\323\1\325\21\323\15\u011b\1\u011d\1\u011b"+
    "\1\u014f\113\u011b\4\0\2\13\6\0\14\13\1\0\6\13"+
    "\4\0\34\13\1\0\1\u0150\2\13\20\0\10\13\32\0"+
    "\1\u0151\200\0\1\u0152\32\0\3\323\1\0\5\323\2\0"+
    "\44\323\1\u0153\31\323\1\325\24\323\1\0\5\323\2\0"+
    "\62\323\1\u0154\13\323\1\325\24\323\1\0\5\323\2\0"+
    "\47\323\1\u0155\26\323\1\325\24\323\1\0\5\323\2\0"+
    "\47\323\1\u0156\26\323\1\325\24\323\1\0\5\323\2\0"+
    "\47\323\1\u0157\26\323\1\325\24\323\1\0\5\323\2\0"+
    "\55\323\1\u0158\20\323\1\325\24\323\1\0\5\323\2\0"+
    "\36\323\1\u0159\37\323\1\325\24\323\1\0\5\323\2\0"+
    "\44\323\1\u015a\31\323\1\325\24\323\1\0\5\323\2\0"+
    "\40\323\1\u015b\35\323\1\325\24\323\1\0\5\323\2\0"+
    "\37\323\1\u015c\36\323\1\325\24\323\1\0\5\323\2\0"+
    "\34\323\1\u015d\41\323\1\325\24\323\1\0\5\323\2\0"+
    "\41\323\1\u015e\34\323\1\325\24\323\1\0\5\323\2\0"+
    "\60\323\1\u015f\15\323\1\325\24\323\1\0\5\323\2\0"+
    "\54\323\1\u0160\21\323\1\325\24\323\1\0\5\323\2\0"+
    "\55\323\1\u0161\20\323\1\325\21\323\15\u011b\1\u011d\2\u011b"+
    "\1\u0162\112\u011b\4\0\2\13\6\0\14\13\1\0\5\13"+
    "\1\u0163\4\0\34\13\1\0\3\13\20\0\10\13\20\0"+
    "\1\u0164\216\0\1\u0165\26\0\3\323\1\0\5\323\2\0"+
    "\47\323\1\u0166\26\323\1\325\24\323\1\0\5\323\2\0"+
    "\46\323\1\u0167\27\323\1\325\24\323\1\0\5\323\2\0"+
    "\42\323\1\u0168\33\323\1\325\24\323\1\0\5\323\2\0"+
    "\50\323\1\u0169\25\323\1\325\24\323\1\0\5\323\2\0"+
    "\44\323\1\u016a\31\323\1\325\24\323\1\0\5\323\2\0"+
    "\46\323\1\u016b\27\323\1\325\24\323\1\0\5\323\2\0"+
    "\46\323\1\u016c\27\323\1\325\24\323\1\0\5\323\2\0"+
    "\54\323\1\u016d\21\323\1\325\24\323\1\0\5\323\2\0"+
    "\44\323\1\u016e\31\323\1\325\24\323\1\0\5\323\2\0"+
    "\44\323\1\u016f\31\323\1\325\24\323\1\0\5\323\2\0"+
    "\46\323\1\u0170\27\323\1\325\24\323\1\0\5\323\2\0"+
    "\46\323\1\u0171\27\323\1\325\24\323\1\0\5\323\2\0"+
    "\34\323\1\u0172\41\323\1\325\21\323\15\u011b\1\u011d\3\u011b"+
    "\1\u0173\111\u011b\36\0\1\u0174\74\0\3\323\1\0\5\323"+
    "\2\0\46\323\1\u0175\27\323\1\325\24\323\1\0\5\323"+
    "\2\0\47\323\1\u0176\26\323\1\325\24\323\1\0\5\323"+
    "\2\0\40\323\1\u0177\35\323\1\325\24\323\1\0\5\323"+
    "\2\0\36\323\1\u0178\37\323\1\325\24\323\1\0\5\323"+
    "\2\0\62\323\1\u0179\13\323\1\325\24\323\1\0\5\323"+
    "\2\0\55\323\1\u017a\20\323\1\325\24\323\1\0\5\323"+
    "\2\0\54\323\1\u017b\21\323\1\325\24\323\1\0\5\323"+
    "\2\0\36\323\1\u017c\37\323\1\325\24\323\1\0\5\323"+
    "\2\0\42\323\1\u017d\33\323\1\325\24\323\1\0\5\323"+
    "\2\0\61\323\1\u017e\14\323\1\325\21\323\100\0\1\u017f"+
    "\32\0\3\323\1\0\5\323\2\0\42\323\1\u0180\33\323"+
    "\1\325\24\323\1\0\5\323\2\0\50\323\1\u0181\25\323"+
    "\1\325\24\323\1\0\5\323\2\0\54\323\1\u0182\21\323"+
    "\1\325\24\323\1\0\5\323\2\0\55\323\1\u0183\20\323"+
    "\1\325\24\323\1\0\5\323\2\0\37\323\1\u0184\22\323"+
    "\1\u0185\13\323\1\325\24\323\1\0\5\323\2\0\37\323"+
    "\1\u0186\36\323\1\325\24\323\1\0\5\323\2\0\44\323"+
    "\1\u0187\31\323\1\325\24\323\1\0\5\323\2\0\44\323"+
    "\1\u0188\31\323\1\325\21\323\104\0\1\u0189\26\0\3\323"+
    "\1\0\5\323\2\0\44\323\1\u018a\31\323\1\325\24\323"+
    "\1\0\5\323\2\0\55\323\1\u018b\20\323\1\325\24\323"+
    "\1\0\5\323\2\0\37\323\1\u018c\36\323\1\325\24\323"+
    "\1\0\5\323\2\0\46\323\1\u018d\6\323\1\u018e\20\323"+
    "\1\325\24\323\1\0\5\323\2\0\44\323\1\u018f\31\323"+
    "\1\325\24\323\1\0\5\323\2\0\34\323\1\u0190\41\323"+
    "\1\325\24\323\1\0\5\323\2\0\20\323\1\u0191\55\323"+
    "\1\325\24\323\1\0\5\323\2\0\20\323\1\u0192\55\323"+
    "\1\325\24\323\1\0\5\323\2\0\37\323\1\u0193\36\323"+
    "\1\325\24\323\1\0\5\323\2\0\44\323\1\u0194\31\323"+
    "\1\325\24\323\1\0\5\323\2\0\51\323\1\u0195\24\323"+
    "\1\325\24\323\1\0\5\323\2\0\34\323\1\u0196\41\323"+
    "\1\325\24\323\1\0\5\323\2\0\14\323\1\u0197\61\323"+
    "\1\325\24\323\1\0\5\323\2\0\42\323\1\u0198\33\323"+
    "\1\325\24\323\1\0\5\323\2\0\44\323\1\u0199\31\323"+
    "\1\325\24\323\1\0\5\323\2\0\14\323\1\u019a\61\323"+
    "\1\325\24\323\1\0\5\323\2\0\36\323\1\u019b\37\323"+
    "\1\325\24\323\1\0\5\323\2\0\61\323\1\u019c\14\323"+
    "\1\325\24\323\1\0\5\323\2\0\37\323\1\u019d\36\323"+
    "\1\325\24\323\1\0\5\323\2\0\55\323\1\u019e\20\323"+
    "\1\325\24\323\1\0\5\323\2\0\44\323\1\u019f\31\323"+
    "\1\325\24\323\1\0\5\323\2\0\47\323\1\u01a0\26\323"+
    "\1\325\24\323\1\0\5\323\2\0\34\323\1\u01a1\41\323"+
    "\1\325\24\323\1\0\5\323\2\0\46\323\1\u01a2\27\323"+
    "\1\325\24\323\1\0\5\323\2\0\36\323\1\u01a3\37\323"+
    "\1\325\24\323\1\0\5\323\2\0\36\323\1\u01a4\37\323"+
    "\1\325\24\323\1\0\5\323\2\0\55\323\1\u01a5\20\323"+
    "\1\325\24\323\1\0\5\323\2\0\46\323\1\u01a6\27\323"+
    "\1\325\24\323\1\0\5\323\2\0\34\323\1\u01a7\41\323"+
    "\1\325\24\323\1\0\5\323\2\0\54\323\1\u01a8\21\323"+
    "\1\325\24\323\1\0\5\323\2\0\44\323\1\u01a9\31\323"+
    "\1\325\21\323";

  private static int [] zzUnpackTrans() {
    int [] result = new int[31577];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\1\1\11\1\1\1\11\1\1\1\11\20\1"+
    "\1\11\10\1\1\11\2\1\1\11\2\1\1\11\1\1"+
    "\1\11\12\1\1\11\4\1\1\0\1\11\1\0\3\1"+
    "\1\0\2\1\1\11\2\1\1\0\1\11\1\0\6\1"+
    "\1\0\10\1\1\11\1\0\2\11\1\0\1\1\1\0"+
    "\1\11\12\1\2\11\1\0\1\1\17\0\10\1\1\11"+
    "\17\0\6\1\1\0\5\1\2\0\1\1\1\11\2\0"+
    "\5\1\13\0\3\1\15\0\6\1\1\0\5\1\6\0"+
    "\5\1\1\0\7\1\1\0\3\1\17\0\1\1\1\0"+
    "\3\1\1\0\7\1\1\0\3\1\20\0\1\1\3\0"+
    "\3\1\1\0\3\1\1\0\1\1\5\0\1\1\2\0"+
    "\1\1\12\0\1\1\1\0\2\1\10\0\1\1\11\0"+
    "\1\1\11\0\1\1\1\0\1\1\6\0\1\1\1\0"+
    "\1\11\3\0\2\1\3\0\1\1\4\0\1\1\10\0"+
    "\1\1\1\0\1\1\2\0\1\1\2\0\1\1\4\0"+
    "\1\11\5\0\1\1\1\0\2\1\1\0\1\1\3\0"+
    "\2\1\2\0\1\1\2\0\1\1\10\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[425];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char[] zzBuffer = new char[0];

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    private int commentStart;
    private int commentDepth;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _HaskellLexer(java.io.Reader in) {
    zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _HaskellLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3364) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer.toString().toCharArray();
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { return TokenPackage.getBLOCK_COMMENT();
          }
        case 106: break;
        case 2: 
          { return TokenType.BAD_CHARACTER;
          }
        case 107: break;
        case 3: 
          { return TokenType.WHITE_SPACE;
          }
        case 108: break;
        case 4: 
          { return TokenPackage.getNEW_LINE();
          }
        case 109: break;
        case 5: 
          { return HaskellLexerTokens.INTEGER;
          }
        case 110: break;
        case 6: 
          { return HaskellLexerTokens.BACKQUOTE;
          }
        case 111: break;
        case 7: 
          { return HaskellLexerTokens.VARSYM;
          }
        case 112: break;
        case 8: 
          { return HaskellLexerTokens.VARID;
          }
        case 113: break;
        case 9: 
          { return HaskellLexerTokens.CONID;
          }
        case 114: break;
        case 10: 
          { return HaskellLexerTokens.UNDERSCORE;
          }
        case 115: break;
        case 11: 
          { return HaskellLexerTokens.COLON;
          }
        case 116: break;
        case 12: 
          { return TokenPackage.getTH_VAR_QUOTE();
          }
        case 117: break;
        case 13: 
          { return HaskellLexerTokens.LAM;
          }
        case 118: break;
        case 14: 
          { return HaskellLexerTokens.CBRACK;
          }
        case 119: break;
        case 15: 
          { return HaskellLexerTokens.AT;
          }
        case 120: break;
        case 16: 
          { return HaskellLexerTokens.MINUS;
          }
        case 121: break;
        case 17: 
          { return HaskellLexerTokens.OCURLY;
          }
        case 122: break;
        case 18: 
          { return HaskellLexerTokens.CCURLY;
          }
        case 123: break;
        case 19: 
          { return HaskellLexerTokens.OBRACK;
          }
        case 124: break;
        case 20: 
          { return HaskellLexerTokens.OPAREN;
          }
        case 125: break;
        case 21: 
          { return HaskellLexerTokens.CPAREN;
          }
        case 126: break;
        case 22: 
          { return HaskellLexerTokens.VBAR;
          }
        case 127: break;
        case 23: 
          { return HaskellLexerTokens.SEMI;
          }
        case 128: break;
        case 24: 
          { return HaskellLexerTokens.DOT;
          }
        case 129: break;
        case 25: 
          { return HaskellLexerTokens.COMMA;
          }
        case 130: break;
        case 26: 
          { return HaskellLexerTokens.EQUAL;
          }
        case 131: break;
        case 27: 
          { return HaskellLexerTokens.RARROW;
          }
        case 132: break;
        case 28: 
          { return HaskellLexerTokens.TILDE;
          }
        case 133: break;
        case 29: 
          { return HaskellLexerTokens.BANG;
          }
        case 134: break;
        case 30: 
          { 
          }
        case 135: break;
        case 31: 
          { return HaskellLexerTokens.STRING;
          }
        case 136: break;
        case 32: 
          { return HaskellLexerTokens.OF;
          }
        case 137: break;
        case 33: 
          { return HaskellLexerTokens.DCOLON;
          }
        case 138: break;
        case 34: 
          { return HaskellLexerTokens.CPABRACK;
          }
        case 139: break;
        case 35: 
          { return TokenPackage.getTH_TY_QUOTE();
          }
        case 140: break;
        case 36: 
          { return HaskellLexerTokens.IF;
          }
        case 141: break;
        case 37: 
          { return HaskellLexerTokens.IN;
          }
        case 142: break;
        case 38: 
          { return HaskellLexerTokens.DO;
          }
        case 143: break;
        case 39: 
          { return HaskellLexerTokens.AS;
          }
        case 144: break;
        case 40: 
          { return TokenPackage.getEND_OF_LINE_COMMENT();
          }
        case 145: break;
        case 41: 
          { yybegin(BLOCK_COMMENT);
    commentDepth = 0;
    commentStart = getTokenStart();
          }
        case 146: break;
        case 42: 
          { return HaskellLexerTokens.OPABRACK;
          }
        case 147: break;
        case 43: 
          { return HaskellLexerTokens.OUBXPAREN;
          }
        case 148: break;
        case 44: 
          { return HaskellLexerTokens.CPARENBAR;
          }
        case 149: break;
        case 45: 
          { return HaskellLexerTokens.CUBXPAREN;
          }
        case 150: break;
        case 46: 
          { return HaskellLexerTokens.DOTDOT;
          }
        case 151: break;
        case 47: 
          { return HaskellLexerTokens.DARROW;
          }
        case 152: break;
        case 48: 
          { return HaskellLexerTokens.LARROW;
          }
        case 153: break;
        case 49: 
          { if (commentDepth > 0) {
            commentDepth--;
        }
        else {
             int state = yystate();
             yybegin(YYINITIAL);
             zzStartRead = commentStart;
             return TokenPackage.getBLOCK_COMMENT();
        }
          }
        case 154: break;
        case 50: 
          { commentDepth++;
          }
        case 155: break;
        case 51: 
          { return HaskellLexerTokens.LET;
          }
        case 156: break;
        case 52: 
          { return HaskellLexerTokens.QVARID;
          }
        case 157: break;
        case 53: 
          { return HaskellLexerTokens.QCONID;
          }
        case 158: break;
        case 54: 
          { return HaskellLexerTokens.CHAR;
          }
        case 159: break;
        case 55: 
          { return CPPTokens.IF;
          }
        case 160: break;
        case 56: 
          { return HaskellLexerTokens.CLOSE_PRAG;
          }
        case 161: break;
        case 57: 
          { return HaskellLexerTokens.CASE;
          }
        case 162: break;
        case 58: 
          { return HaskellLexerTokens.DATA;
          }
        case 163: break;
        case 59: 
          { return HaskellLexerTokens.ROLE;
          }
        case 164: break;
        case 60: 
          { return HaskellLexerTokens.ELSE;
          }
        case 165: break;
        case 61: 
          { return HaskellLexerTokens.TYPE;
          }
        case 166: break;
        case 62: 
          { return HaskellLexerTokens.THEN;
          }
        case 167: break;
        case 63: 
          { return HaskellLexerTokens.CLASS;
          }
        case 168: break;
        case 64: 
          { return HaskellLexerTokens.INFIX;
          }
        case 169: break;
        case 65: 
          { return CPPTokens.ELSE;
          }
        case 170: break;
        case 66: 
          { return HaskellLexerTokens.WHERE;
          }
        case 171: break;
        case 67: 
          { return HaskellLexerTokens.MODULE;
          }
        case 172: break;
        case 68: 
          { return HaskellLexerTokens.IMPORT;
          }
        case 173: break;
        case 69: 
          { return HaskellLexerTokens.INFIXL;
          }
        case 174: break;
        case 70: 
          { return HaskellLexerTokens.INFIXR;
          }
        case 175: break;
        case 71: 
          { return HaskellLexerTokens.FORALL;
          }
        case 176: break;
        case 72: 
          { return HaskellLexerTokens.FAMILY;
          }
        case 177: break;
        case 73: 
          { return TokenPackage.getPRAGMA();
          }
        case 178: break;
        case 74: 
          { return CPPTokens.ENDIF;
          }
        case 179: break;
        case 75: 
          { return HaskellLexerTokens.HIDING;
          }
        case 180: break;
        case 76: 
          { return HaskellLexerTokens.DEFAULT;
          }
        case 181: break;
        case 77: 
          { return HaskellLexerTokens.NEWTYPE;
          }
        case 182: break;
        case 78: 
          { return HaskellLexerTokens.SCC_PRAG;
          }
        case 183: break;
        case 79: 
          { return HaskellLexerTokens.ANN_PRAG;
          }
        case 184: break;
        case 80: 
          { return HaskellLexerTokens.INSTANCE;
          }
        case 185: break;
        case 81: 
          { return HaskellLexerTokens.DERIVING;
          }
        case 186: break;
        case 82: 
          { return HaskellLexerTokens.CORE_PRAG;
          }
        case 187: break;
        case 83: 
          { return HaskellLexerTokens.CTYPE;
          }
        case 188: break;
        case 84: 
          { return HaskellLexerTokens.RULES_PRAG;
          }
        case 189: break;
        case 85: 
          { return HaskellLexerTokens.QUALIFIED;
          }
        case 190: break;
        case 86: 
          { yybegin(TEX); return TokenPackage.getBLOCK_COMMENT();
          }
        case 191: break;
        case 87: 
          { return HaskellLexerTokens.UNPACK_PRAG;
          }
        case 192: break;
        case 88: 
          { return HaskellLexerTokens.SOURCE_PRAG;
          }
        case 193: break;
        case 89: 
          { return HaskellLexerTokens.INLINE_PRAG;
          }
        case 194: break;
        case 90: 
          { yypushback(1);
                        return HaskellLexerTokens.OPARENBAR;
          }
        case 195: break;
        case 91: 
          { return HaskellLexerTokens.MINIMAL_PRAG;
          }
        case 196: break;
        case 92: 
          { return HaskellLexerTokens.WARNING_PRAG;
          }
        case 197: break;
        case 93: 
          { return HaskellLexerTokens.NOUNPACK_PRAG;
          }
        case 198: break;
        case 94: 
          { return HaskellLexerTokens.OVERLAPS;
          }
        case 199: break;
        case 95: 
          { yybegin(YYINITIAL); return TokenPackage.getBLOCK_COMMENT();
          }
        case 200: break;
        case 96: 
          { return HaskellLexerTokens.VECT_PRAG;
          }
        case 201: break;
        case 97: 
          { return HaskellLexerTokens.GENERATED_PRAG;
          }
        case 202: break;
        case 98: 
          { return HaskellLexerTokens.DEPRECATED_PRAG;
          }
        case 203: break;
        case 99: 
          { return HaskellLexerTokens.SPEC_PRAG;
          }
        case 204: break;
        case 100: 
          { return HaskellLexerTokens.INCOHERENT;
          }
        case 205: break;
        case 101: 
          { return HaskellLexerTokens.NOVECT_PRAG;
          }
        case 206: break;
        case 102: 
          { return HaskellLexerTokens.OVERLAPPING;
          }
        case 207: break;
        case 103: 
          { return HaskellLexerTokens.OVERLAPPABLE;
          }
        case 208: break;
        case 104: 
          { return HaskellLexerTokens.VECT_SCALAR_PRAG;
          }
        case 209: break;
        case 105: 
          { return HaskellLexerTokens.SPEC_INLINE_PRAG;
          }
        case 210: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case BLOCK_COMMENT: {
              int state = yystate();
        yybegin(YYINITIAL);
        zzStartRead = commentStart;
        return TokenPackage.getBLOCK_COMMENT();
            }
            case 426: break;
            default:
            return null;
            }
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
